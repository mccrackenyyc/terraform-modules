name: Module Documentation Pipeline

on:
  pull_request:
    branches: [main]
    paths:
      - 'templates/**/*.tf'
  workflow_dispatch:

env:
  TF_VERSION: '1.12.0'

jobs:
  # ================================
  # 📌 Stage 1: Change Detection
  # ================================

  detect-module-changes:
    name: Detect Changed Modules
    runs-on: ubuntu-latest
    outputs:
      changed-modules: ${{ steps.module-changes.outputs.modules }}
      has-module-changes: ${{ steps.module-changes.outputs.has-module-changes }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Detect changed modules
        id: module-changes
        run: |
          BASE_SHA="${{ github.event.pull_request.base.sha }}"
          
          # Get changed files in templates directory
          CHANGED_FILES=$(git diff --name-only $BASE_SHA HEAD -- templates/ || echo "")
          
          if [ -z "$CHANGED_FILES" ]; then
            echo "has-module-changes=false" >> $GITHUB_OUTPUT
            echo "modules=[]" >> $GITHUB_OUTPUT
            echo "No changes detected in templates/"
            exit 0
          fi
          
          echo "has-module-changes=true" >> $GITHUB_OUTPUT
          echo "Changed files:"
          echo "$CHANGED_FILES"
          
          # Extract unique module paths (templates/category/module-name)
          CHANGED_MODULES=$(echo "$CHANGED_FILES" | grep -E '^templates/[^/]+/[^/]+/' | cut -d'/' -f1-3 | sort -u | jq -R . | jq -s -c .)
          
          echo "modules=$CHANGED_MODULES" >> $GITHUB_OUTPUT
          echo "Changed modules: $CHANGED_MODULES"

      - name: Changes Summary
        run: |
          if [ "${{ steps.module-changes.outputs.has-module-changes }}" = "true" ]; then
            echo "### Changed Modules" >> $GITHUB_STEP_SUMMARY
            echo '${{ steps.module-changes.outputs.modules }}' | jq -r '.[] | "- " + .' >> $GITHUB_STEP_SUMMARY
          else
            echo "ℹ️ No module changes detected" >> $GITHUB_STEP_SUMMARY
          fi

  # ================================
  # 📌 Stage 2: Documentation Generation
  # ================================

  generate-docs:
    name: Generate Documentation
    runs-on: ubuntu-latest
    needs: [detect-module-changes]
    if: needs.detect-module-changes.outputs.has-module-changes == 'true'
    strategy:
      matrix:
        module: ${{ fromJson(needs.detect-module-changes.outputs.changed-modules) }}
      max-parallel: 1
      fail-fast: false
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          fetch-depth: 0

      - name: Generate terraform-docs
        uses: terraform-docs/gh-actions@v1.2.0
        with:
          working-dir: ${{ matrix.module }}
          output-file: README.md
          output-method: inject
          git-push: true
          git-commit-message: "docs(${{ matrix.module }}): update module documentation"

      - name: Documentation Summary
        if: always()
        run: |
          echo "### Documentation Generation Results" >> $GITHUB_STEP_SUMMARY
          echo "Module: ${{ matrix.module }}" >> $GITHUB_STEP_SUMMARY
          if [ "${{ job.status }}" = "success" ]; then
            echo "✅ Documentation updated successfully" >> $GITHUB_STEP_SUMMARY
          else
            echo "❌ Documentation generation failed" >> $GITHUB_STEP_SUMMARY
          fi
          echo "" >> $GITHUB_STEP_SUMMARY