name: Validation and Release Pipeline

on:
  pull_request:
    branches: [main]
    paths:
      - 'templates/**'
      - '*.tf'
      - '*.hcl'
  push:
    branches: [main]
    paths:
      - 'templates/**'
      - '*.tf'
      - '*.hcl'
  workflow_dispatch:

env:
  TF_VERSION: '1.12.0'

jobs:
  detect-changes:
    name: Detect Changed Modules
    runs-on: ubuntu-latest
    outputs:
      changed-modules: ${{ steps.changes.outputs.modules }}
      has-changes: ${{ steps.changes.outputs.has-changes }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Detect changed modules
        id: changes
        run: |
          if [ "${{ github.event_name }}" = "pull_request" ]; then
            BASE_SHA="${{ github.event.pull_request.base.sha }}"
          else
            # For push events, compare with previous commit
            BASE_SHA="HEAD~1"
          fi
          
          # Get changed files in templates directory
          CHANGED_FILES=$(git diff --name-only $BASE_SHA HEAD -- templates/ || echo "")
          
          if [ -z "$CHANGED_FILES" ]; then
            echo "has-changes=false" >> $GITHUB_OUTPUT
            echo "modules=[]" >> $GITHUB_OUTPUT
            echo "No changes detected in templates/"
            exit 0
          fi
          
          echo "has-changes=true" >> $GITHUB_OUTPUT
          echo "Changed files:"
          echo "$CHANGED_FILES"
          
          # Extract unique module paths (templates/category/module-name)
          CHANGED_MODULES=$(echo "$CHANGED_FILES" | grep -E '^templates/[^/]+/[^/]+/' | cut -d'/' -f1-3 | sort -u | jq -R . | jq -s -c .)
          
          echo "modules=$CHANGED_MODULES" >> $GITHUB_OUTPUT
          echo "Changed modules: $CHANGED_MODULES"

      - name: Changes Summary
        run: |
          if [ "${{ steps.changes.outputs.has-changes }}" = "true" ]; then
            echo "### Changed Modules" >> $GITHUB_STEP_SUMMARY
            echo '${{ steps.changes.outputs.modules }}' | jq -r '.[] | "- " + .' >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
          else
            echo "ℹ️ No module changes detected - pipeline skipped" >> $GITHUB_STEP_SUMMARY
          fi

  validate:
    name: Validate Changed Modules
    runs-on: ubuntu-latest
    needs: detect-changes
    if: needs.detect-changes.outputs.has-changes == 'true'
    strategy:
      matrix:
        module: ${{ fromJson(needs.detect-changes.outputs.changed-modules) }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TF_VERSION }}

      - name: Setup TFLint
        uses: terraform-linters/setup-tflint@v3

      - name: Terraform Format Check
        id: terraform-fmt
        run: terraform fmt -check -recursive
        working-directory: ${{ matrix.module }}

      - name: Terraform Init
        run: terraform init -backend=false
        working-directory: ${{ matrix.module }}

      - name: Install TFLint plugins
        id: tflint-init
        run: tflint --init

      - name: TFLint
        id: tflint
        run: tflint --recursive
        working-directory: ${{ matrix.module }}

      - name: Run Checkov Security Scan
        id: checkov
        uses: bridgecrewio/checkov-action@v12
        with:
          directory: ${{ matrix.module }}
          framework: terraform
          output_format: cli
          config_file: .checkov.yml

      - name: Terraform Validate
        id: terraform-validate
        run: terraform validate
        working-directory: ${{ matrix.module }}

      - name: Module Validation Summary
        if: always()
        run: |
          echo "### Validation Results" >> $GITHUB_STEP_SUMMARY
          if [ "${{ steps.terraform-fmt.outcome }}" = "success" ] && \
             [ "${{ steps.tflint-init.outcome }}" = "success" ] && \
             [ "${{ steps.tflint.outcome }}" = "success" ] && \
             [ "${{ steps.checkov.outcome }}" = "success" ] && \
             [ "${{ steps.terraform-validate.outcome }}" = "success" ]; then
            echo "✅ All modules passed validation" >> $GITHUB_STEP_SUMMARY
          else
            echo "❌ Validation failed" >> $GITHUB_STEP_SUMMARY
          fi
          echo "" >> $GITHUB_STEP_SUMMARY

  release:
    name: Create Release
    runs-on: ubuntu-latest
    needs: [detect-changes, validate]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main' && needs.detect-changes.outputs.has-changes == 'true'
    permissions:
      contents: write
      issues: write
      pull-requests: write
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.SEMANTIC_RELEASE_TOKEN }}
          persist-credentials: false

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Install semantic-release
        run: |
          npm install -g semantic-release @semantic-release/changelog @semantic-release/git @semantic-release/github

      - name: Run semantic-release
        id: semantic-release
        env:
          GITHUB_TOKEN: ${{ secrets.SEMANTIC_RELEASE_TOKEN }}
        run: semantic-release

      - name: Release Summary
        if: always()
        run: |
          echo "### Release Results" >> $GITHUB_STEP_SUMMARY
          if [ "${{ steps.semantic-release.outcome }}" = "success" ]; then
            echo "✅ Release created successfully" >> $GITHUB_STEP_SUMMARY
          else
            echo "❌ Release failed" >> $GITHUB_STEP_SUMMARY
          fi