name: Release Pipeline

on:
  pull_request:
    branches: [main]
    paths:
      - 'templates/**'
      - '*.tf'
      - '*.hcl'
  push:
    branches: [main]
    paths:
      - 'templates/**'
      - '*.tf'
      - '*.hcl'
  workflow_dispatch:

env:
  TF_VERSION: '1.12.0'

jobs:
  detect-changes:
    name: Detect Changed Modules
    runs-on: ubuntu-latest
    outputs:
      changed-modules: ${{ steps.changes.outputs.modules }}
      has-changes: ${{ steps.changes.outputs.has-changes }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Detect changed modules
        id: changes
        run: |
          if [ "${{ github.event_name }}" = "pull_request" ]; then
            BASE_SHA="${{ github.event.pull_request.base.sha }}"
          else
            # For push events, compare with previous commit
            BASE_SHA="HEAD~1"
          fi
          
          # Get changed files in templates directory
          CHANGED_FILES=$(git diff --name-only $BASE_SHA HEAD -- templates/ || echo "")
          
          if [ -z "$CHANGED_FILES" ]; then
            echo "has-changes=false" >> $GITHUB_OUTPUT
            echo "modules=[]" >> $GITHUB_OUTPUT
            echo "No changes detected in templates/"
            exit 0
          fi
          
          echo "has-changes=true" >> $GITHUB_OUTPUT
          echo "Changed files:"
          echo "$CHANGED_FILES"
          
          # Extract unique module paths (templates/category/module-name)
          CHANGED_MODULES=$(echo "$CHANGED_FILES" | grep -E '^templates/[^/]+/[^/]+/' | cut -d'/' -f1-3 | sort -u | jq -R . | jq -s -c .)
          
          echo "modules=$CHANGED_MODULES" >> $GITHUB_OUTPUT
          echo "Changed modules: $CHANGED_MODULES"

  validate:
    name: Validate Changed Modules
    runs-on: ubuntu-latest
    needs: detect-changes
    if: needs.detect-changes.outputs.has-changes == 'true'
    strategy:
      matrix:
        module: ${{ fromJson(needs.detect-changes.outputs.changed-modules) }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TF_VERSION }}

      - name: Setup TFLint
        uses: terraform-linters/setup-tflint@v3

      - name: Terraform Format Check
        run: terraform fmt -check -recursive
        working-directory: ${{ matrix.module }}

      - name: Terraform Init
        run: terraform init -backend=false
        working-directory: ${{ matrix.module }}

      - name: Install TFLint plugins
        run: tflint --init

      - name: TFLint
        run: tflint --recursive
        working-directory: ${{ matrix.module }}

      - name: Terraform Validate
        run: terraform validate
        working-directory: ${{ matrix.module }}

  release:
    name: Create Release
    runs-on: ubuntu-latest
    needs: [detect-changes, validate]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main' && needs.detect-changes.outputs.has-changes == 'true'
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Install semantic-release
        run: |
          npm install -g semantic-release @semantic-release/changelog @semantic-release/git @semantic-release/github

      - name: Create .releaserc.json
        run: |
          cat > .releaserc.json << 'EOF'
          {
            "branches": ["main"],
            "plugins": [
              "@semantic-release/commit-analyzer",
              "@semantic-release/release-notes-generator",
              [
                "@semantic-release/changelog",
                {
                  "changelogFile": "CHANGELOG.md"
                }
              ],
              [
                "@semantic-release/git",
                {
                  "assets": ["CHANGELOG.md"],
                  "message": "chore(release): ${nextRelease.version} [skip ci]\n\n${nextRelease.notes}"
                }
              ],
              "@semantic-release/github"
            ]
          }
          EOF

      - name: Run semantic-release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: semantic-release

  summary:
    name: Pipeline Summary
    runs-on: ubuntu-latest
    needs: [detect-changes, validate, release]
    if: always()
    steps:
      - name: Generate Summary
        run: |
          echo "## Release Pipeline Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          if [ "${{ needs.detect-changes.outputs.has-changes }}" = "true" ]; then
            echo "### Changed Modules" >> $GITHUB_STEP_SUMMARY
            echo '${{ needs.detect-changes.outputs.changed-modules }}' | jq -r '.[] | "- " + .' >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            
            echo "### Validation Results" >> $GITHUB_STEP_SUMMARY
            if [ "${{ needs.validate.result }}" = "success" ]; then
              echo "✅ All modules passed validation" >> $GITHUB_STEP_SUMMARY
            else
              echo "❌ Validation failed" >> $GITHUB_STEP_SUMMARY
            fi
            echo "" >> $GITHUB_STEP_SUMMARY
            
            if [ "${{ github.event_name }}" = "push" ] && [ "${{ github.ref }}" = "refs/heads/main" ]; then
              echo "### Release Results" >> $GITHUB_STEP_SUMMARY
              if [ "${{ needs.release.result }}" = "success" ]; then
                echo "✅ Release created successfully" >> $GITHUB_STEP_SUMMARY
              elif [ "${{ needs.release.result }}" = "skipped" ]; then
                echo "ℹ️ No release created (no conventional commits)" >> $GITHUB_STEP_SUMMARY
              else
                echo "❌ Release failed" >> $GITHUB_STEP_SUMMARY
              fi
            fi
          else
            echo "ℹ️ No module changes detected - pipeline skipped" >> $GITHUB_STEP_SUMMARY
          fi